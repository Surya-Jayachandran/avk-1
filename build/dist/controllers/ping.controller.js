"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.PingController=void 0;const tslib_1=require("tslib"),core_1=require("@loopback/core"),rest_1=require("@loopback/rest"),datasources_1=require("../datasources"),PING_RESPONSE={description:"Ping Response",content:{"application/json":{schema:{type:"object",title:"PingResponse",properties:{greeting:{type:"string"},date:{type:"string"},url:{type:"string"},headers:{type:"object",properties:{"Content-Type":{type:"string"}},additionalProperties:!0}}}}}};let PingController=class{constructor(t,e,n){this.req=t,this.apiDataSource=e,this.res=n}async ping(){return{message:"Success"}}async pingStatus(t){try{t=null!=t?t:0;let e=!1,n=!1,s=!1;try{e=!!await this.apiDataSource.ping(),console.log(`Database Connected: ${e}`)}catch(t){e=!1,console.error(t,"Database Connection Failed")}const r=`<h1>Avk API Status</h1>\n    <div class="section">\n      <h2>Core Services</h2>\n      <ul>\n        <li>${(t=>`<span style="display:inline-block;width:10px;height:10px;border-radius:50%;background-color:${t?"green":"red"};margin-right:8px;"></span>`)(e)} Database</li>\n      </ul>\n    </div>`;let o=t?r:`\n  <!DOCTYPE html>\n  <html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <title>Avk API Status</title>\n    <style>\n      body {\n        font-family: Arial, sans-serif;\n        background: #f9f9f9;\n        padding: 20px;\n      }\n      .section {\n        margin-bottom: 30px;\n        border-left: 4px solid #007bff;\n        padding-left: 12px;\n      }\n      .section h2 {\n        text-transform: uppercase;\n        font-size: 16px;\n        margin-bottom: 10px;\n      }\n      ul {\n        list-style-type: none;\n        padding-left: 0;\n      }\n      li {\n        margin: 5px 0;\n      }\n    </style>\n  </head>\n  <body>\n    ${r}\n  </body>\n  </html>\n  `;this.res.contentType("text/html");const i=this.getConnectionStatusCode([{status:e,errorCode:531},{status:n,errorCode:532},{status:s,errorCode:533}]);return this.res.status(i).send(o),this.res}catch(t){throw t}}getConnectionStatusCode(t){for(const e of t)if(!e.status)return e.errorCode;return 200}};exports.PingController=PingController,tslib_1.__decorate([(0,rest_1.get)("/ping"),(0,rest_1.response)(200,{description:"Ping",content:{"application/json":{schema:{type:"object",properties:{message:{type:"string",default:"Success"}}}}}}),tslib_1.__metadata("design:type",Function),tslib_1.__metadata("design:paramtypes",[]),tslib_1.__metadata("design:returntype",Promise)],PingController.prototype,"ping",null),tslib_1.__decorate([(0,rest_1.get)("/health"),(0,rest_1.response)(200,{description:"Ping",content:{"text/html":{schema:{type:"string"}}}}),tslib_1.__param(0,rest_1.param.query.number("type")),tslib_1.__metadata("design:type",Function),tslib_1.__metadata("design:paramtypes",[Number]),tslib_1.__metadata("design:returntype",Promise)],PingController.prototype,"pingStatus",null),exports.PingController=PingController=tslib_1.__decorate([tslib_1.__param(0,(0,core_1.inject)(rest_1.RestBindings.Http.REQUEST)),tslib_1.__param(1,(0,core_1.inject)("datasources.AvkDataSource")),tslib_1.__param(2,(0,core_1.inject)(rest_1.RestBindings.Http.RESPONSE)),tslib_1.__metadata("design:paramtypes",[Object,datasources_1.AvkDataSource,Object])],PingController);