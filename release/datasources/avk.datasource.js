"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.AvkDataSource=void 0;const tslib_1=require("tslib"),core_1=require("@loopback/core"),repository_1=require("@loopback/repository"),config={name:"avk",connector:"postgresql",url:"postgresql://"+process.env.DB_USER+":"+process.env.DB_PASSWORD+"@"+process.env.DB_HOST+"/"+process.env.DB_NAME+"?retryWrites=true&w=majority",host:process.env.DB_HOST,port:process.env.DB_PORT,user:process.env.DB_USER,password:process.env.DB_PASSWORD,database:process.env.DB_NAME};let AvkDataSource=class extends repository_1.juggler.DataSource{constructor(e=config){var o;super(e),this.retryDelay=Number(null!==(o=process.env.DB_RETRY)&&void 0!==o?o:15e3),this.on("connected",(()=>{console.log(`✅ Connected to ${process.env.DB_NAME} database successfully!`)})),this.on("error",(async e=>{console.error({message:`❌ ${process.env.DB_NAME} database connection failed: ${e.message}`}),setTimeout((()=>this.reconnect()),this.retryDelay)}))}async reconnect(){try{await this.connect(),await this.verifyConnection(),console.log(`✅ Successfully reconnected to ${process.env.DB_NAME} database.`)}catch(e){console.error({message:`❌ Failed to reconnect to ${process.env.DB_NAME} database:`,err:e})}}async verifyConnection(){try{await this.execute("SELECT 1"),console.log(`✅ ${process.env.DB_NAME} Database connection verified successfully`)}catch(e){throw console.error({message:`❌ Failed to verify ${process.env.DB_NAME} database connection:`,error:e}),e}}stop(){return super.disconnect()}};exports.AvkDataSource=AvkDataSource,AvkDataSource.dataSourceName="avk",AvkDataSource.defaultConfig=config,exports.AvkDataSource=AvkDataSource=tslib_1.__decorate([(0,core_1.lifeCycleObserver)("datasource"),tslib_1.__param(0,(0,core_1.inject)("datasources.config.avk",{optional:!0})),tslib_1.__metadata("design:paramtypes",[Object])],AvkDataSource);